webpackJsonp([7],{19:function(s,i,l){var t,e;__vdoc_config_=l(29),e=l(31),s.exports=t||{},s.exports.__esModule&&(s.exports=s.exports["default"]),e&&(("function"==typeof s.exports?s.exports.options:s.exports).html=e)},29:function(s,i){},31:function(s,i){s.exports='<p>一个Vdoc文档初始化完成后</p> <h2 id=_route>_route</h2> <ul> <li><strong>类型: </strong> 属性</li> <li><strong>用法: </strong> addRoute 手动添加的路由</li> </ul> <h2 id=moutdata>moutData</h2> <ul> <li><strong>类型: </strong> 属性</li> <li><strong>用法: </strong> mout 挂载给vdoc的文档配置数据<figure class="highlight js"><table><tr><td class=code><pre><div class=line>{</div><div class=line>    <span class=string>\'/doc/guide\'</span>: {</div><div class=line>        root: <span class=string>""</span>,</div><div class=line>        dir: <span class=string>"./doc"</span>,</div><div class=line>        base: <span class=string>"guide.doc"</span>,</div><div class=line>        ext: <span class=string>".doc"</span>,</div><div class=line>        path: <span class=string>"./doc/guide.doc"</span>,</div><div class=line>        route: <span class=string>"/doc/guide"</span>,</div><div class=line>        config: {</div><div class=line>            title: <span class=string>""</span>,</div><div class=line>            subtitle: <span class=literal>true</span>,</div><div class=line>            type: <span class=string>"guide"</span>,</div><div class=line>            order: <span class=number>1</span>,</div><div class=line>            template: <span class=string>"layout"</span></div><div class=line>        }</div><div class=line>    }</div><div class=line>}</div></pre></td></tr></table></figure></li> </ul> <h2 id=mixin>mixin</h2> <ul> <li><strong>类型: </strong> 属性</li> <li><strong>用法: </strong><figure class="highlight js"><table><tr><td class=code><pre><div class=line>computed: {</div><div class=line>    <span class=comment>// 文档数据</span></div><div class=line>    doc{</div><div class=line>        html&lt;<span class=built_in>String</span>&gt;</div><div class=line>        ...</div><div class=line>        <span class=comment>// 其他组件module.exports 的属性</span></div><div class=line>    }</div><div class=line>    subtitles[{</div><div class=line>        title&lt;<span class=built_in>String</span>&gt;</div><div class=line>        index&lt;Int&gt;</div><div class=line>        deep&lt;Int&gt;</div><div class=line>    }]</div><div class=line>}</div></pre></td></tr></table></figure></li> </ul> <h2 id=start>start</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{vue el} el</code></li> <li><code>{vue-router options} options</code> <strong>返回</strong> 返回一个vue-router对象</li> </ul> </li> <li><strong>用法: </strong> 启动一个vue app. el 为vue-router初始化的el，options为vue-router参数</li> </ul> <h2 id=theme>theme</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{object} themes</code></li> </ul> </li> <li><strong>用法: </strong> 安装vdoc主题，themes对象的key为组件的名字，value为合法的vue组件对象</li> </ul> <h2 id=addroute>addRoute</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{string} path</code></li> <li><code>{components object} handler</code></li> </ul> </li> <li><strong>用法: </strong> 增加一个路由。path为路由的路径，如&#39;/doc/api/index&#39;; handler为合法的vue组件对象。</li> </ul> <h2 id=getdoc>getDoc</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{String} route</code></li> <li><code>{Function} cbk</code></li> </ul> </li> <li><strong>用法: </strong> 异步获取文档的内容，route为路由，cbk为获取文档成功后的回调。</li> </ul> <h2 id=mout>mout</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{Object} data</code></li> </ul> </li> <li><strong>用法: </strong> 将数据挂载到vdoc.moutData，一般参数data为vdoc-loader处理过的文档配置文件。</li> </ul> <h2 id=use>use</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{*} property</code></li> <li><code>{*} handler</code></li> </ul> </li> <li><strong>用法: </strong> 给vdoc挂载属性，若挂载已存在属性将会抛错。</li> </ul> <h2 id=filter>filter</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{String} key</code></li> <li><code>{String} val</code></li> </ul> </li> <li><strong>返回</strong> 返回一个文档数据的数组</li> <li><strong>用法: </strong> 过滤文档，例如根据路径过滤文档<figure class="highlight js"><table><tr><td class=code><pre><div class=line>vdoc.filter(<span class=string>\'path\'</span>, <span class=string>\'api\'</span>)</div><div class=line><span class=comment>// 将会对所有挂载在moutData的文档数据的path进行过滤，匹配出路径中含有`api` 的文档数据，返回一个数组</span></div></pre></td></tr></table></figure><h2 id=gettype>getType</h2> </li> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{String} type</code></li> </ul> </li> <li><strong>返回</strong> 返回一个文档数据的数组</li> <li><strong>用法: </strong> 和filter类似，返回文档熟路，根据类型过滤文档<figure class="highlight js"><table><tr><td class=code><pre><div class=line>vdoc.getType(<span class=string>\'example\'</span>)</div><div class=line><span class=comment>// 将会对所有挂载在moutData的文档数据的type进行过滤，匹配type为example的文档数据，返回一个数组</span></div></pre></td></tr></table></figure></li> </ul> <h2 id=sort>sort</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{Array} docDataArray</code></li> <li><code>{Boolean} orderBy</code></li> </ul> </li> <li><strong>返回</strong> 返回一个文档数据的数组</li> <li><strong>用法: </strong> 根据文档的order，对getType或filter返回的数据进行排序。orderBy 为 true 则为正序，反之则为倒序。<figure class="highlight js"><table><tr><td class=code><pre><div class=line>vdoc.sort(vdoc.getType(<span class=string>\'example\'</span>))</div></pre></td></tr></table></figure></li> </ul> <h2 id=planish>planish</h2> <ul> <li><strong>类型: </strong> 方法</li> <li><strong>参数: </strong><ul> <li><code>{Array} Subtitles</code></li> </ul> </li> <li><strong>返回</strong> 返回一个新的subtitles</li> <li><strong>用法: </strong> 当文档配置subtitle为真时，将会分析出该文档的subtitle挂载到moutData对应的对象中。pliansh 方法可以压平subtitle深度。<figure class="highlight html"><table><tr><td class=code><pre><div class=line>## h2</div><div class=line>## 4h</div></pre></td></tr></table></figure> 以上 markdnow 生成 html 为<figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>h2</span>&gt;</span><span class=tag>&lt;/<span class=name>h2</span>&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>h4</span>&gt;</span><span class=tag>&lt;/<span class=name>h4</span>&gt;</span></div></pre></td></tr></table></figure> 若subtitle为true，此时subtitles 为<figure class="highlight js"><table><tr><td class=code><pre><div class=line>[</div><div class=line>    {</div><div class=line>        index: <span class=number>0</span>,</div><div class=line>        title: <span class=string>"h2"</span>,</div><div class=line>        deep: <span class=number>1</span></div><div class=line>    },</div><div class=line>    {</div><div class=line>        index: <span class=number>1</span>,</div><div class=line>        title: <span class=string>"h4"</span>,</div><div class=line>        deep: <span class=number>3</span></div><div class=line>    }</div><div class=line>]</div></pre></td></tr></table></figure> 若执行 planish(subtitles) 得到的新subtitles 为<figure class="highlight js"><table><tr><td class=code><pre><div class=line>[</div><div class=line>    {</div><div class=line>        index: <span class=number>0</span>,</div><div class=line>        title: <span class=string>"h2"</span>,</div><div class=line>        deep: <span class=number>0</span></div><div class=line>    },</div><div class=line>    {</div><div class=line>        index: <span class=number>1</span>,</div><div class=line>        title: <span class=string>"h4"</span>,</div><div class=line>        deep: <span class=number>2</span></div><div class=line>    }</div><div class=line>]</div></pre></td></tr></table></figure></li> </ul> <p></p>'}});